---
title: "penguin_analysis"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Week 1

# Loading libraries and code files.

```{r}
library(tidyverse)
library(palmerpenguins)
library(janitor)
library(here)
library(ggplot2)
library(patchwork)
library(ragg)
library(svglite)

#source function says to R i want you to find this file and use the stuff within this file to run the code laid out below.
source(here("functions","cleaning_penguins.r"))
source(here("functions","plotting_penguins.r"))
```

# Preserving Raw Data

```{r}
write.csv(penguins_raw, here("data","penguins_raw.csv"))

#loading raw data
penguins_raw<-read.csv(here("data","penguins_raw.csv"))
```

# Cleaning raw data and generating clean data set.
```{r}
#Using functions from functions script (cleaning.R)
cleaning_penguin_columns <- function(raw_data){
  print("cleaned names, removed comments, empty rows and columns and delta")
  raw_data %>% 
    clean_names() %>% 
    shorten_species() %>% 
      remove_empty(c("rows", "cols")) %>% 
      select(-starts_with("delta")) %>% 
      select(-comments)}
      
#Runs code
colnames(penguins_raw)
penguins_clean<-cleaning_penguin_columns(penguins_raw)
colnames(penguins_clean)

#writes new csv for clean penguins data. 
write.csv(penguins_clean, here("data","penguins_clean.csv"))
```

# Removing NA values:
```{r}
body_mass <- penguins_clean %>%
    select(species, body_mass_g) %>%
    remove_NA()

print(paste("Number of rows:", nrow(body_mass)))
print(paste("Number of missing values:", sum(is.na(body_mass))))
```

# Filtering by Species
```{r}
adelie_data <- penguins_clean %>%
  filter(species == "Adelie")

head(adelie_data)
```

# Combining the above 2:
```{r}

adelie_body_mass <- penguins_clean %>%
  filter(species == "Adelie") %>%
  select(species, body_mass_g) %>%
  remove_NA()

head(adelie_body_mass)
```

# Renv:
Should all be typed in console. Commands typed uncoded to ensure code cannot run, using /# #renv::init initialises renv. #renv::snapshot creates or updates the renv.lock file, allowing us to keep a record of all packages installed for this analysis. #renv::diagnostics allows us to run a summary of what packages have been installed by renv. #renv::restore() allows us or someone else to restore the snapshot and ensure the same libraries are installed. #renv::status allows us to check if renv is active. Anything with a :: should be typed in the console according to LF.

## Week 4
# Getting myself set (telling computer where I am and loading ggplot2 package)
```{r}
here::here()
library(ggplot2)
```
# Making an ugly boxplot

```{r}
names(penguins_clean)

penguins_flippers <- penguins_clean %>% 
  select(species, flipper_length_mm) %>% 
  drop_na()

flipper_boxplot_plain <- ggplot(data=penguins_flippers, aes(x=species, y=flipper_length_mm)) + geom_boxplot()

flipper_boxplot_plain
```
# Making nicer figure
```{r}
flipper_boxplot_nicer <- ggplot(data = penguins_flippers, aes (x = species, y = flipper_length_mm)) + geom_boxplot(aes(color = species), width = 0.3, show.legend = FALSE) + geom_jitter(aes(color = species), alpha = 0.3, show.legend = FALSE, position = position_jitter(width = 0.2, seed=0)) + labs (x= "Species", y = "Flipper Length (mm)")

flipper_boxplot_nicer
```

# Adding nice colours
```{r}
#defines colour mapping with names for each species
species_colours <- c("Adelie" = "darkorange", "Chinstrap" = "purple", "Gentoo" = "cyan4")

flipper_boxplot_colours <- ggplot(data = penguins_flippers, aes (x = species, y = flipper_length_mm)) + geom_boxplot(aes(color = species), width = 0.3, show.legend = FALSE) + geom_jitter(aes(color = species), alpha = 0.3, show.legend = FALSE, position = position_jitter(width = 0.2, seed=0)) + scale_color_manual(values = species_colours) + labs (x= "Species", y = "Flipper Length (mm)") + theme_bw()

flipper_boxplot_colours
#adding theme_bw removes grey background
```

# Making separate function and using that to plot boxplot...
```{r}
source(here("functions", "plotting_penguins.r"))

plot_boxplot(penguins_clean, species, body_mass_g, "Species", "Body mass (g)", species_colours)
```

# Making subplots
```{r}
library(patchwork)

#Creating different subplots with different y-axis columns
plot1 <- plot_boxplot(
    penguins_clean, species, flipper_length_mm, 
    "Penguin Species", "Flipper Length (mm)", 
    species_colours)

plot2 <- plot_boxplot(
    penguins_clean, species, culmen_length_mm, 
    "Penguin Species", "Bill Length (mm)", 
    species_colours)

plot3 <- plot_boxplot(
    penguins_clean, species, culmen_depth_mm, 
    "Penguin Species", "Bill Depth (mm)", 
    species_colours)

plot4 <- plot_boxplot(
    penguins_clean, species, body_mass_g, 
    "Penguin Species", "Body Mass (g)", 
    species_colours)

# Combine plots in a 2x2 grid

combined_plot <- (plot1 | plot2) / (plot3 | plot4)

combined_plot
```

## Making publication quality figures:

#Making .png figures

```{r}
library(ragg)

flipper_boxplot_png <- 
plot_boxplot(penguins_clean, species, flipper_length_mm, "Species", "Flipper length mm", species_colours)

agg_png("figures/penguin_boxplot_default.png", 
        width = 20,
        height = 20,
        units = "cm",
        res = 300,
        scaling = 1)

print(flipper_boxplot_png)
dev.off()

agg_png("figures/penguin_boxplot_2.png", 
        width = 20,
        height = 20,
        units = "cm",
        res = 300,
        scaling = 2)

print(flipper_boxplot_png)
dev.off()

agg_png("figures/penguin_boxplot_lowres.png", 
        width = 20,
        height = 20,
        units = "cm",
        res = 50,
        scaling = 1)

print(flipper_boxplot_png)
dev.off()

agg_png("figures/penguin_boxplot_poster.png", 
        width = 40,
        height = 40,
        units = "cm",
        res = 300,
        scaling = 4)

print(flipper_boxplot_png)
dev.off()

agg_png("figures/penguin_boxplot_ppt.png", 
        width = 20,
        height = 20,
        units = "cm",
        res = 300,
        scaling = 3)

print(flipper_boxplot_png)
dev.off()

#can use scaling to control how big fonts are relative to size of diagram.
#can adjust width and height to make size bigger (e.g for poster) - remember to change scaling accordingly
```

#Making images using vectors
```{r}
library(svglite)

flipper_boxplot_vector <- plot_boxplot(penguins_clean, species, flipper_length_mm, "Species", "Flipper Length (mm)", species_colours)

inches_conversion = 2.54
svglite("figures/penguin_boxplot_vector.svg", 
        width = 20 / inches_conversion, 
        height = 20 / inches_conversion, 
        scaling = 2)
print(flipper_boxplot_vector)
dev.off()
```

Lesson over yippee